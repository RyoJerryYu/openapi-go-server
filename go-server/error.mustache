{{>partial_header}}
package {{packageName}}

import (
	"errors"
	"fmt"
	"net/http"
)

var (
	// ErrTypeAssertionError is thrown when type an interface does not match the asserted type
	ErrTypeAssertionError = errors.New("unable to assert type")
)

type HttpError interface {
	error
	StatusCode() int
}

// httpError indicates an error.
type httpError struct {
	Code    int
	Message string
}

func (e *httpError) Error() string {
	return e.Message
}

// NewError returns an http error.
func NewError(code int, msg string) *httpError {
	return &httpError{Code: code, Message: msg}
}

func (e *httpError) StatusCode() int {
	return e.Code
}

// ParsingError indicates that an error has occurred when parsing request parameters
type ParsingError struct {
	Err error
}

func (e *ParsingError) Unwrap() error {
	return e.Err
}

func (e *ParsingError) Error() string {
	return e.Err.Error()
}

func (e *ParsingError) StatusCode() int {
	return http.StatusBadRequest
}

// RequiredError indicates that an error has occurred when parsing request parameters
type RequiredError struct {
	Field string
}

func (e *RequiredError) Error() string {
	return fmt.Sprintf("required field '%s' is zero value.", e.Field)
}

func (e *RequiredError) StatusCode() int {
	return http.StatusUnprocessableEntity
}

// ErrorHandler defines the required method for handling error. You may implement it and inject this into a controller if
// you would like errors to be handled differently from the DefaultErrorHandler
type ErrorHandler func(w http.ResponseWriter, r *http.Request, err error, result *ImplResponse)

// DefaultErrorHandler defines the default logic on how to handle errors from the controller. Any errors from parsing
// request params will return a StatusBadRequest. Otherwise, the error code originating from the servicer will be used.
func DefaultErrorHandler(w http.ResponseWriter, r *http.Request, err error, result *ImplResponse) {
	if httpError, ok := err.(HttpError); ok {
		// Handle all http errors
		code := httpError.StatusCode()
		EncodeJSONResponse(err.Error(), &code, w)
	} else {
		// Handle all other errors
		EncodeJSONResponse(err.Error(), &result.Code,{{#addResponseHeaders}} result.Headers,{{/addResponseHeaders}} w)
	}
}
