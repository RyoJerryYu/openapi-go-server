/*
 * Swagger Petstore
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * API version: 1.0.3
 * Contact: apiteam@swagger.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A StoreApiController binds http requests to an api service and writes the service results to the http response
type StoreApiController struct {
	service StoreApiServicer
}

// NewStoreApiController creates a default api controller
func NewStoreApiController(s StoreApiServicer) Router {
	return &StoreApiController{service: s}
}

// Routes returns all of the api route for the StoreApiController
func (c *StoreApiController) Routes() Routes {
	return Routes{
		{
			"DeleteOrder",
			strings.ToUpper("Delete"),
			"/v2/store/order/{orderId}",
			c.DeleteOrder,
		},
		{
			"GetInventory",
			strings.ToUpper("Get"),
			"/v2/store/inventory",
			c.GetInventory,
		},
		{
			"GetOrderById",
			strings.ToUpper("Get"),
			"/v2/store/order/{orderId}",
			c.GetOrderById,
		},
		{
			"PlaceOrder",
			strings.ToUpper("Post"),
			"/v2/store/order",
			c.PlaceOrder,
		},
	}
}

// DeleteOrder - Delete purchase order by ID
func (c *StoreApiController) DeleteOrder(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	orderId, err := parseIntParameter(params["orderId"])
	if err != nil {
		apiLog.Error(err)
		w.WriteHeader(500)
		return
	}

	var serviceErr error
	serviceErr = c.service.DeleteOrder(r.Context(), orderId)
	if serviceErr != nil {
		var ae *Error
		if errors.As(serviceErr, &ae) {
			w.WriteHeader(ae.Code)
			fmt.Fprint(w, ae.Error())
		} else {
			w.WriteHeader(500)
		}
		return
	}
}

// GetInventory - Returns pet inventories by status
func (c *StoreApiController) GetInventory(w http.ResponseWriter, r *http.Request) {
	var result map[string]int32
	var serviceErr error
	result, serviceErr = c.service.GetInventory(r.Context())
	if serviceErr != nil {
		var ae *Error
		if errors.As(serviceErr, &ae) {
			w.WriteHeader(ae.Code)
			fmt.Fprint(w, ae.Error())
		} else {
			w.WriteHeader(500)
		}
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// GetOrderById - Find purchase order by ID
func (c *StoreApiController) GetOrderById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	orderId, err := parseIntParameter(params["orderId"])
	if err != nil {
		apiLog.Error(err)
		w.WriteHeader(500)
		return
	}

	var result Order
	var serviceErr error
	result, serviceErr = c.service.GetOrderById(r.Context(), orderId)
	if serviceErr != nil {
		var ae *Error
		if errors.As(serviceErr, &ae) {
			w.WriteHeader(ae.Code)
			fmt.Fprint(w, ae.Error())
		} else {
			w.WriteHeader(500)
		}
		return
	}

	EncodeJSONResponse(result, nil, w)
}

// PlaceOrder - Place an order for a pet
func (c *StoreApiController) PlaceOrder(w http.ResponseWriter, r *http.Request) {
	body := &Order{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&body); err != nil {
		apiLog.Error(err)
		w.WriteHeader(500)
		return
	}

	var result Order
	var serviceErr error
	result, serviceErr = c.service.PlaceOrder(r.Context(), *body)
	if serviceErr != nil {
		var ae *Error
		if errors.As(serviceErr, &ae) {
			w.WriteHeader(ae.Code)
			fmt.Fprint(w, ae.Error())
		} else {
			w.WriteHeader(500)
		}
		return
	}

	EncodeJSONResponse(result, nil, w)
}
